{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/joaocruz/frontend-test/src/components/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchSuggestions } from \"../utils/api\";\nimport \"./Autocomplete.css\";\nimport ProductDetail from \"./ProductDetail\";\n\nfunction Autocomplete() {\n  _s();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [Id, setId] = useState();\n  const [suggestions, setSuggestions] = useState([]); //* I would refactor the fetcher and would add the .catch to cathc nay possible network and response errors and\n  // would also add the .then finally for the loading spinner than would add when requesting data\n  // Could later on refactor the code by adding use-debounce which is a great package\n\n  useEffect(() => {\n    setTimeout(() => {\n      if (searchTerm !== \"\" || searchTerm != null) {\n        fetchSuggestions(searchTerm).then(_suggestions => {\n          let bucket = [];\n\n          for (let i = 0; i < 10; i++) {\n            if (_suggestions[i] != null || _suggestions[i] !== undefined) {\n              bucket[i] = _suggestions[i];\n            }\n          }\n\n          setSuggestions(bucket);\n        });\n      }\n\n      ;\n    }, 3000);\n  }, [searchTerm]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"product-row\",\n      role: \"img\",\n      placeholder: \"Product display\",\n      children: Id ? /*#__PURE__*/_jsxDEV(ProductDetail, {\n        productId: Id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 15\n      }, this) : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: searchTerm,\n        className: \"search-box\",\n        placeholder: \"Search for a product\",\n        onChange: e => setSearchTerm(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this), searchTerm ? suggestions === null || suggestions === void 0 ? void 0 : suggestions.map((item, key) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"autocomplete-items\",\n          role: \"button\",\n          placeholder: \"Button to product\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            index: `button-${key}`,\n            onClick: () => {\n              setId(item === null || item === void 0 ? void 0 : item.id);\n              setSearchTerm(\"\");\n            },\n            children: item === null || item === void 0 ? void 0 : item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this);\n      }) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Autocomplete, \"jpZi3GbFTBYGwNFx93C927lT3Os=\");\n\n_c = Autocomplete;\nexport default Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/home/joaocruz/frontend-test/src/components/Autocomplete.js"],"names":["React","useEffect","useState","fetchSuggestions","ProductDetail","Autocomplete","searchTerm","setSearchTerm","Id","setId","suggestions","setSuggestions","setTimeout","then","_suggestions","bucket","i","undefined","e","target","value","map","item","key","id","title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { fetchSuggestions } from \"../utils/api\";\nimport \"./Autocomplete.css\";\nimport ProductDetail from \"./ProductDetail\";\n\nfunction Autocomplete() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [Id, setId] = useState();\n  const [suggestions, setSuggestions] = useState([]);\n\n  //* I would refactor the fetcher and would add the .catch to cathc nay possible network and response errors and\n  // would also add the .then finally for the loading spinner than would add when requesting data\n  // Could later on refactor the code by adding use-debounce which is a great package\n  useEffect(() => {\n    setTimeout(() => {  \n      if(searchTerm !== \"\" || searchTerm != null){   \n      fetchSuggestions(searchTerm).then((_suggestions) => {\n        let bucket = []\n        for(let i = 0; i < 10; i++){\n          if(_suggestions[i] != null || _suggestions[i] !== undefined){\n            bucket[i] = _suggestions[i]\n          }\n        }\n        setSuggestions(bucket)    \n    }\n      )\n        };\n    }, 3000)\n  }, [searchTerm]);\n\n  return (\n    <div className=\"search-container\">\n      <div className=\"product-row\" role=\"img\" placeholder=\"Product display\">\n        {Id ? <ProductDetail productId={Id} /> : \"\"}\n      </div>\n      <div className=\"search-row\">\n      <input\n        type=\"text\"\n        value={searchTerm}\n        className=\"search-box\"\n        placeholder=\"Search for a product\"\n        onChange={(e) => setSearchTerm(e.target.value)}\n      />\n       {searchTerm ? suggestions?.map((item, key) => {\n          return (\n            <div className=\"autocomplete-items\" role=\"button\" placeholder=\"Button to product\">\n              <button index={`button-${key}`} onClick={() => {\n                setId(item?.id)\n                setSearchTerm(\"\")\n              }}>{item?.title}</button>\n            </div>\n          )\n      }) : \"\"}\n      </div>\n    </div>\n  );\n}\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}